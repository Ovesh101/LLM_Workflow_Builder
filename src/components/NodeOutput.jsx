import { Handle } from "reactflow";

const NodeOutput = ({ data }) => {
  console.log("data in node output", data.generatedOutput);

  const handleCopyToClipboard = () => {
    if (data.generatedOutput) {
      navigator.clipboard.writeText(data.generatedOutput);
      alert("Content copied to clipboard!");
    }
  };

  const hasError = data.error; 

  return (
    <div
      className="bg-white pb-[70px] rounded-[20px]"
      style={{
        borderWidth: "1px",
        borderColor: hasError ? "#F87171" : data.generatedOutput ? "#34D399" : "#e5e5e5", // Red if error, Green if output exists
      }}
    >
      {/* Title with Circle and Status */}
      <div className="flex px-6 py-3 gap-2 items-center justify-between">
        <div className="flex items-center gap-2">
          <img src="/output.svg" alt="Run" className="h-[20px] w-[20px]" />
          <h4 className="text-lg font-[600] text-black">OUTPUT</h4>
        </div>
        {/* Status Circle */}
        <div
          className={`h-3 w-3 rounded-full ${hasError ? "bg-red-400" : data.generatedOutput ? "bg-green-400" : "bg-gray-400"}`}
        ></div>
      </div>

      {/* Instruction Box */}
      <div className="mb-4 w-full p-4 bg-[#EEF4FF]">
        <p className="text-[#666666] opacity-45 text-[14px] font-medium">
          This is the output generated by the system.
        </p>
      </div>

      {/* Output Textarea */}
      <div className="px-6">
        <label
          htmlFor="generatedOutput"
          className="text-left text-sm font-medium text-gray-700"
        >
          Output Response
        </label>
        <textarea
          id="generatedOutput"
          value={data.generatedOutput || data.error || ""} // Display error message if it exists
          readOnly
          placeholder="Output Response Will Be Shown Here..."
          className="mt-3 w-full px-3 py-2 border border-gray-400 text-black text-[14px] rounded-[4px] focus:outline-none resize-none overflow-y-auto"
          style={{ maxHeight: "200px", minHeight: "150px" }}
        />
      </div>

      {/* Copy Button */}
      <div className="flex justify-end px-6 mt-2">
        <img
          src="/copy.svg"
          onClick={handleCopyToClipboard}
          alt="Copy"
          className="h-[20px] w-[20px]"
        />
      </div>

      {/* Input handle for connecting from the LLM node */}
      <Handle
        type="target"
        position="left"
        id="input"
        style={{ background: "#555" }}
      />
    </div>
  );
};

export default NodeOutput;
